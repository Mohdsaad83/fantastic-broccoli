{"ast":null,"code":"var _jsxFileName = \"/Users/bosaad77/ga/porjects/fantastic-broccoli/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    delete axios.defaults.headers.common[\"Authorization\"];\n    setUser(null);\n  };\n  const fetchUserProfile = useCallback(async () => {\n    try {\n      // Try API call first\n      const response = await axios.get(\"/api/users/profile\");\n      setUser(response.data);\n    } catch (error) {\n      console.log(\"API profile fetch failed, using mock authentication\");\n\n      // Check for mock token\n      const token = localStorage.getItem(\"token\");\n      if (token && token.startsWith(\"mock_token_\")) {\n        // Extract user ID from mock token\n        const userId = parseInt(token.split(\"_\")[2]);\n        const existingUsers = JSON.parse(localStorage.getItem(\"registeredUsers\") || \"[]\");\n        const user = existingUsers.find(u => u.id === userId);\n        if (user) {\n          setUser(user);\n        } else {\n          logout();\n        }\n      } else {\n        logout();\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n      // Verify token and get user info\n      fetchUserProfile();\n    } else {\n      setLoading(false);\n    }\n  }, [fetchUserProfile]);\n  const login = async (email, password) => {\n    try {\n      // Try API call first\n      const response = await axios.post(\"/api/auth/login\", {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n      setUser(user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      // Fallback to mock login for demo purposes\n      console.log(\"API login failed, using mock login\");\n\n      // Check if user exists in localStorage\n      const existingUsers = JSON.parse(localStorage.getItem(\"registeredUsers\") || \"[]\");\n      const existingUser = existingUsers.find(user => user.email === email);\n      if (!existingUser) {\n        return {\n          success: false,\n          error: \"No account found with this email address\"\n        };\n      }\n\n      // For demo purposes, accept any password for registered users\n      // In a real app, you'd verify the password hash\n\n      // Generate mock token and set user\n      const mockToken = `mock_token_${existingUser.id}_${Date.now()}`;\n      localStorage.setItem(\"token\", mockToken);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${mockToken}`;\n      setUser(existingUser);\n      return {\n        success: true\n      };\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      // Try API call first\n      const response = await axios.post(\"/api/auth/register\", {\n        name,\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n      setUser(user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      // Fallback to mock registration for demo purposes\n      console.log(\"API registration failed, using mock registration\");\n\n      // Check if user already exists in localStorage\n      const existingUsers = JSON.parse(localStorage.getItem(\"registeredUsers\") || \"[]\");\n      const userExists = existingUsers.find(user => user.email === email);\n      if (userExists) {\n        return {\n          success: false,\n          error: \"User with this email already exists\"\n        };\n      }\n\n      // Create new user\n      const newUser = {\n        id: Date.now(),\n        // Simple ID generation\n        name,\n        email,\n        createdAt: new Date().toISOString()\n      };\n\n      // Add to registered users\n      existingUsers.push(newUser);\n      localStorage.setItem(\"registeredUsers\", JSON.stringify(existingUsers));\n\n      // Generate mock token and set user\n      const mockToken = `mock_token_${newUser.id}_${Date.now()}`;\n      localStorage.setItem(\"token\", mockToken);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${mockToken}`;\n      setUser(newUser);\n      return {\n        success: true\n      };\n    }\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"A8RZdnnP5ZQGSDQ5HOL8f3J8NYU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","logout","localStorage","removeItem","defaults","headers","common","fetchUserProfile","response","get","data","error","console","log","token","getItem","startsWith","userId","parseInt","split","existingUsers","JSON","parse","find","u","id","login","email","password","post","setItem","success","existingUser","mockToken","Date","now","register","name","userExists","newUser","createdAt","toISOString","push","stringify","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bosaad77/ga/porjects/fantastic-broccoli/src/contexts/AuthContext.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\"\nimport axios from \"axios\"\n\nconst AuthContext = createContext()\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    delete axios.defaults.headers.common[\"Authorization\"]\n    setUser(null)\n  }\n\n  const fetchUserProfile = useCallback(async () => {\n    try {\n      // Try API call first\n      const response = await axios.get(\"/api/users/profile\")\n      setUser(response.data)\n    } catch (error) {\n      console.log(\"API profile fetch failed, using mock authentication\")\n      \n      // Check for mock token\n      const token = localStorage.getItem(\"token\")\n      if (token && token.startsWith(\"mock_token_\")) {\n        // Extract user ID from mock token\n        const userId = parseInt(token.split(\"_\")[2])\n        const existingUsers = JSON.parse(localStorage.getItem(\"registeredUsers\") || \"[]\")\n        const user = existingUsers.find(u => u.id === userId)\n        \n        if (user) {\n          setUser(user)\n        } else {\n          logout()\n        }\n      } else {\n        logout()\n      }\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n      // Verify token and get user info\n      fetchUserProfile()\n    } else {\n      setLoading(false)\n    }\n  }, [fetchUserProfile])\n\n  const login = async (email, password) => {\n    try {\n      // Try API call first\n      const response = await axios.post(\"/api/auth/login\", { email, password })\n      const { token, user } = response.data\n\n      localStorage.setItem(\"token\", token)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n      setUser(user)\n\n      return { success: true }\n    } catch (error) {\n      // Fallback to mock login for demo purposes\n      console.log(\"API login failed, using mock login\")\n      \n      // Check if user exists in localStorage\n      const existingUsers = JSON.parse(localStorage.getItem(\"registeredUsers\") || \"[]\")\n      const existingUser = existingUsers.find(user => user.email === email)\n      \n      if (!existingUser) {\n        return {\n          success: false,\n          error: \"No account found with this email address\",\n        }\n      }\n      \n      // For demo purposes, accept any password for registered users\n      // In a real app, you'd verify the password hash\n      \n      // Generate mock token and set user\n      const mockToken = `mock_token_${existingUser.id}_${Date.now()}`\n      localStorage.setItem(\"token\", mockToken)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${mockToken}`\n      setUser(existingUser)\n\n      return { success: true }\n    }\n  }\n\n  const register = async (name, email, password) => {\n    try {\n      // Try API call first\n      const response = await axios.post(\"/api/auth/register\", {\n        name,\n        email,\n        password,\n      })\n      const { token, user } = response.data\n\n      localStorage.setItem(\"token\", token)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n      setUser(user)\n\n      return { success: true }\n    } catch (error) {\n      // Fallback to mock registration for demo purposes\n      console.log(\"API registration failed, using mock registration\")\n      \n      // Check if user already exists in localStorage\n      const existingUsers = JSON.parse(localStorage.getItem(\"registeredUsers\") || \"[]\")\n      const userExists = existingUsers.find(user => user.email === email)\n      \n      if (userExists) {\n        return {\n          success: false,\n          error: \"User with this email already exists\",\n        }\n      }\n      \n      // Create new user\n      const newUser = {\n        id: Date.now(), // Simple ID generation\n        name,\n        email,\n        createdAt: new Date().toISOString()\n      }\n      \n      // Add to registered users\n      existingUsers.push(newUser)\n      localStorage.setItem(\"registeredUsers\", JSON.stringify(existingUsers))\n      \n      // Generate mock token and set user\n      const mockToken = `mock_token_${newUser.id}_${Date.now()}`\n      localStorage.setItem(\"token\", mockToken)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${mockToken}`\n      setUser(newUser)\n\n      return { success: true }\n    }\n  }\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}