{"ast":null,"code":"import api from \"./api\";\n\n// Mock data for when API is not available\nconst MOCK_RECIPES = [{\n  id: 1,\n  title: \"Mediterranean Bowl\",\n  description: \"A healthy and delicious Mediterranean-inspired bowl with fresh vegetables, olives, and feta cheese.\",\n  imageUrl: \"/recipe-images/Mediterranean-Bowl-Recipe.jpg\",\n  prepTime: 15,\n  cookTime: 20,\n  servings: 4,\n  calories: 320,\n  difficulty: \"easy\",\n  category: \"healthy\",\n  tags: [\"mediterranean\", \"healthy\", \"vegetarian\"],\n  rating: 4.5,\n  ingredients: [\"2 cups quinoa\", \"1 cucumber, diced\", \"1 cup cherry tomatoes, halved\", \"1/2 red onion, thinly sliced\", \"1/2 cup kalamata olives\", \"4 oz feta cheese, crumbled\", \"1/4 cup olive oil\", \"2 tbsp lemon juice\", \"1 tsp dried oregano\", \"Salt and pepper to taste\"],\n  instructions: [\"Cook quinoa according to package directions and let cool.\", \"In a large bowl, combine quinoa, cucumber, tomatoes, and red onion.\", \"In a small bowl, whisk together olive oil, lemon juice, oregano, salt, and pepper.\", \"Pour dressing over quinoa mixture and toss to combine.\", \"Top with olives and feta cheese.\", \"Serve immediately or chill for later.\"]\n}, {\n  id: 2,\n  title: \"Spicy Mushroom Stir-fry\",\n  description: \"A quick and flavorful stir-fry with mixed mushrooms and aromatic spices.\",\n  imageUrl: \"/recipe-images/msm.jpg\",\n  prepTime: 10,\n  cookTime: 15,\n  servings: 2,\n  calories: 180,\n  difficulty: \"easy\",\n  category: \"vegetarian\",\n  tags: [\"spicy\", \"quick\", \"mushrooms\"],\n  rating: 4.2,\n  ingredients: [\"1 lb mixed mushrooms, sliced\", \"2 tbsp vegetable oil\", \"3 cloves garlic, minced\", \"1 inch ginger, minced\", \"2 green onions, sliced\", \"2 tbsp soy sauce\", \"1 tbsp oyster sauce\", \"1 tsp chili flakes\", \"1 tsp sesame oil\"],\n  instructions: [\"Heat vegetable oil in a large wok or skillet over high heat.\", \"Add mushrooms and cook until golden brown, about 5-7 minutes.\", \"Add garlic and ginger, stir-fry for 30 seconds.\", \"Add soy sauce, oyster sauce, and chili flakes.\", \"Stir-fry for another 2-3 minutes.\", \"Remove from heat, add sesame oil and green onions.\", \"Serve hot with rice.\"]\n}, {\n  id: 3,\n  title: \"Classic Chicken Parmesan\",\n  description: \"Crispy breaded chicken breast topped with marinara sauce and melted cheese.\",\n  imageUrl: null,\n  prepTime: 20,\n  cookTime: 25,\n  servings: 4,\n  calories: 450,\n  difficulty: \"medium\",\n  category: \"main\",\n  tags: [\"chicken\", \"italian\", \"comfort-food\"],\n  rating: 4.7,\n  ingredients: [\"4 chicken breasts, pounded thin\", \"1 cup breadcrumbs\", \"1/2 cup parmesan cheese, grated\", \"2 eggs, beaten\", \"1 cup flour\", \"2 cups marinara sauce\", \"2 cups mozzarella cheese, shredded\", \"2 tbsp olive oil\", \"Salt and pepper to taste\"],\n  instructions: [\"Preheat oven to 375°F.\", \"Set up breading station with flour, beaten eggs, and breadcrumb mixture.\", \"Season chicken with salt and pepper, then bread each piece.\", \"Heat olive oil in a large skillet and brown chicken on both sides.\", \"Transfer chicken to baking dish, top with marinara and cheese.\", \"Bake for 20-25 minutes until cheese is melted and bubbly.\", \"Serve with pasta or salad.\"]\n}, {\n  id: 4,\n  title: \"Chocolate Chip Cookies\",\n  description: \"Classic homemade chocolate chip cookies that are crispy on the outside and chewy on the inside.\",\n  imageUrl: null,\n  prepTime: 15,\n  cookTime: 12,\n  servings: 24,\n  calories: 150,\n  difficulty: \"easy\",\n  category: \"dessert\",\n  tags: [\"cookies\", \"chocolate\", \"baking\"],\n  rating: 4.8,\n  ingredients: [\"2 1/4 cups all-purpose flour\", \"1 tsp baking soda\", \"1 tsp salt\", \"1 cup butter, softened\", \"3/4 cup granulated sugar\", \"3/4 cup brown sugar\", \"2 large eggs\", \"2 tsp vanilla extract\", \"2 cups chocolate chips\"],\n  instructions: [\"Preheat oven to 375°F.\", \"Mix flour, baking soda, and salt in a bowl.\", \"Cream butter and sugars until fluffy.\", \"Beat in eggs and vanilla.\", \"Gradually add flour mixture.\", \"Stir in chocolate chips.\", \"Drop rounded tablespoons onto ungreased baking sheets.\", \"Bake 9-11 minutes until golden brown.\"]\n}];\nclass RecipesAPI {\n  // Get all recipes with optional filters\n  async getRecipes(params = {}) {\n    try {\n      const response = await api.get(\"/recipes\", {\n        params\n      });\n      const recipes = response.data.recipes || response.data || [];\n      return {\n        success: true,\n        data: Array.isArray(recipes) ? recipes : []\n      };\n    } catch (error) {\n      return {\n        success: true,\n        data: MOCK_RECIPES\n      };\n    }\n  }\n\n  // Get a single recipe by ID\n  async getRecipeById(id) {\n    try {\n      const response = await api.get(`/recipes/${id}`);\n      const recipe = response.data.recipe || response.data;\n      const transformedRecipe = {\n        ...recipe,\n        id: recipe._id || recipe.id,\n        tags: recipe.dietaryTags || recipe.tags || [],\n        tips: recipe.tips || [],\n        image: recipe.image || \"🍽️\",\n        ingredients: recipe.ingredients || [],\n        instructions: recipe.instructions || [],\n        rating: recipe.averageRating || 0,\n        reviews: recipe.totalRatings || 0,\n        cookingTime: (recipe.prepTime || 0) + (recipe.cookTime || 0),\n        nutrition: recipe.nutrition || {}\n      };\n      return {\n        success: true,\n        data: transformedRecipe\n      };\n    } catch (error) {\n      const recipe = MOCK_RECIPES.find(r => r.id === parseInt(id));\n      if (recipe) {\n        return {\n          success: true,\n          data: recipe\n        };\n      }\n      return {\n        success: false,\n        error: \"Recipe not found\",\n        data: null\n      };\n    }\n  }\n\n  // Search recipes\n  async searchRecipes(searchTerm, filters = {}) {\n    try {\n      const params = {\n        search: searchTerm,\n        ...filters\n      };\n      const response = await api.get(\"/recipes/search\", {\n        params\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      const filtered = MOCK_RECIPES.filter(recipe => recipe.title.toLowerCase().includes(searchTerm.toLowerCase()) || recipe.description.toLowerCase().includes(searchTerm.toLowerCase()) || recipe.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())));\n      return {\n        success: true,\n        data: filtered\n      };\n    }\n  }\n\n  // Get recipes by category\n  async getRecipesByCategory(category) {\n    try {\n      const response = await api.get(`/recipes/category/${category}`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      const filtered = MOCK_RECIPES.filter(recipe => category === \"all\" || recipe.category === category);\n      return {\n        success: true,\n        data: filtered\n      };\n    }\n  }\n\n  // Get featured/popular recipes\n  async getFeaturedRecipes() {\n    try {\n      const response = await api.get(\"/recipes/featured\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      const featured = MOCK_RECIPES.filter(recipe => recipe.rating >= 4.5);\n      return {\n        success: true,\n        data: featured\n      };\n    }\n  }\n\n  // Add recipe to favorites\n  async addToFavorites(recipeId) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/favorite`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Backend not available\"\n      };\n    }\n  }\n\n  // Remove recipe from favorites\n  async removeFromFavorites(recipeId) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/favorite`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Backend not available\"\n      };\n    }\n  }\n\n  // Check if recipe is in favorites\n  async isFavorite(recipeId) {\n    try {\n      const response = await api.get(`/recipes/${recipeId}/favorite`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: true,\n        data: {\n          isFavorite: false\n        }\n      };\n    }\n  }\n\n  // Get user's favorite recipes\n  async getFavorites() {\n    try {\n      const response = await api.get(\"/recipes/favorites\");\n      return {\n        success: true,\n        data: response.data.favorites || []\n      };\n    } catch (error) {\n      return {\n        success: true,\n        data: []\n      };\n    }\n  }\n\n  // Rate a recipe\n  async rateRecipe(recipeId, rating) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/rate`, {\n        rating\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Backend not available\"\n      };\n    }\n  }\n\n  // Get recipe categories\n  async getCategories() {\n    try {\n      const response = await api.get(\"/recipes/categories\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      const categories = [{\n        value: \"all\",\n        label: \"All Recipes\"\n      }, {\n        value: \"healthy\",\n        label: \"Healthy\"\n      }, {\n        value: \"vegetarian\",\n        label: \"Vegetarian\"\n      }, {\n        value: \"main\",\n        label: \"Main Dishes\"\n      }, {\n        value: \"dessert\",\n        label: \"Desserts\"\n      }];\n      return {\n        success: true,\n        data: categories\n      };\n    }\n  }\n\n  // Get recipe tags\n  async getTags() {\n    try {\n      const response = await api.get(\"/recipes/tags\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      const allTags = MOCK_RECIPES.flatMap(recipe => recipe.tags);\n      const uniqueTags = [...new Set(allTags)].map(tag => ({\n        value: tag,\n        label: tag\n      }));\n      return {\n        success: true,\n        data: uniqueTags\n      };\n    }\n  }\n}\nconst recipesAPI = new RecipesAPI();\nexport default recipesAPI;","map":{"version":3,"names":["api","MOCK_RECIPES","id","title","description","imageUrl","prepTime","cookTime","servings","calories","difficulty","category","tags","rating","ingredients","instructions","RecipesAPI","getRecipes","params","response","get","recipes","data","success","Array","isArray","error","getRecipeById","recipe","transformedRecipe","_id","dietaryTags","tips","image","averageRating","reviews","totalRatings","cookingTime","nutrition","find","r","parseInt","searchRecipes","searchTerm","filters","search","filtered","filter","toLowerCase","includes","some","tag","getRecipesByCategory","getFeaturedRecipes","featured","addToFavorites","recipeId","post","removeFromFavorites","isFavorite","getFavorites","favorites","rateRecipe","getCategories","categories","value","label","getTags","allTags","flatMap","uniqueTags","Set","map","recipesAPI"],"sources":["/Users/bosaad77/ga/porjects/fantastic-broccoli/src/services/recipesAPI.js"],"sourcesContent":["import api from \"./api\"\n\n// Mock data for when API is not available\nconst MOCK_RECIPES = [\n  {\n    id: 1,\n    title: \"Mediterranean Bowl\",\n    description:\n      \"A healthy and delicious Mediterranean-inspired bowl with fresh vegetables, olives, and feta cheese.\",\n    imageUrl: \"/recipe-images/Mediterranean-Bowl-Recipe.jpg\",\n    prepTime: 15,\n    cookTime: 20,\n    servings: 4,\n    calories: 320,\n    difficulty: \"easy\",\n    category: \"healthy\",\n    tags: [\"mediterranean\", \"healthy\", \"vegetarian\"],\n    rating: 4.5,\n    ingredients: [\n      \"2 cups quinoa\",\n      \"1 cucumber, diced\",\n      \"1 cup cherry tomatoes, halved\",\n      \"1/2 red onion, thinly sliced\",\n      \"1/2 cup kalamata olives\",\n      \"4 oz feta cheese, crumbled\",\n      \"1/4 cup olive oil\",\n      \"2 tbsp lemon juice\",\n      \"1 tsp dried oregano\",\n      \"Salt and pepper to taste\",\n    ],\n    instructions: [\n      \"Cook quinoa according to package directions and let cool.\",\n      \"In a large bowl, combine quinoa, cucumber, tomatoes, and red onion.\",\n      \"In a small bowl, whisk together olive oil, lemon juice, oregano, salt, and pepper.\",\n      \"Pour dressing over quinoa mixture and toss to combine.\",\n      \"Top with olives and feta cheese.\",\n      \"Serve immediately or chill for later.\",\n    ],\n  },\n  {\n    id: 2,\n    title: \"Spicy Mushroom Stir-fry\",\n    description:\n      \"A quick and flavorful stir-fry with mixed mushrooms and aromatic spices.\",\n    imageUrl: \"/recipe-images/msm.jpg\",\n    prepTime: 10,\n    cookTime: 15,\n    servings: 2,\n    calories: 180,\n    difficulty: \"easy\",\n    category: \"vegetarian\",\n    tags: [\"spicy\", \"quick\", \"mushrooms\"],\n    rating: 4.2,\n    ingredients: [\n      \"1 lb mixed mushrooms, sliced\",\n      \"2 tbsp vegetable oil\",\n      \"3 cloves garlic, minced\",\n      \"1 inch ginger, minced\",\n      \"2 green onions, sliced\",\n      \"2 tbsp soy sauce\",\n      \"1 tbsp oyster sauce\",\n      \"1 tsp chili flakes\",\n      \"1 tsp sesame oil\",\n    ],\n    instructions: [\n      \"Heat vegetable oil in a large wok or skillet over high heat.\",\n      \"Add mushrooms and cook until golden brown, about 5-7 minutes.\",\n      \"Add garlic and ginger, stir-fry for 30 seconds.\",\n      \"Add soy sauce, oyster sauce, and chili flakes.\",\n      \"Stir-fry for another 2-3 minutes.\",\n      \"Remove from heat, add sesame oil and green onions.\",\n      \"Serve hot with rice.\",\n    ],\n  },\n  {\n    id: 3,\n    title: \"Classic Chicken Parmesan\",\n    description:\n      \"Crispy breaded chicken breast topped with marinara sauce and melted cheese.\",\n    imageUrl: null,\n    prepTime: 20,\n    cookTime: 25,\n    servings: 4,\n    calories: 450,\n    difficulty: \"medium\",\n    category: \"main\",\n    tags: [\"chicken\", \"italian\", \"comfort-food\"],\n    rating: 4.7,\n    ingredients: [\n      \"4 chicken breasts, pounded thin\",\n      \"1 cup breadcrumbs\",\n      \"1/2 cup parmesan cheese, grated\",\n      \"2 eggs, beaten\",\n      \"1 cup flour\",\n      \"2 cups marinara sauce\",\n      \"2 cups mozzarella cheese, shredded\",\n      \"2 tbsp olive oil\",\n      \"Salt and pepper to taste\",\n    ],\n    instructions: [\n      \"Preheat oven to 375°F.\",\n      \"Set up breading station with flour, beaten eggs, and breadcrumb mixture.\",\n      \"Season chicken with salt and pepper, then bread each piece.\",\n      \"Heat olive oil in a large skillet and brown chicken on both sides.\",\n      \"Transfer chicken to baking dish, top with marinara and cheese.\",\n      \"Bake for 20-25 minutes until cheese is melted and bubbly.\",\n      \"Serve with pasta or salad.\",\n    ],\n  },\n  {\n    id: 4,\n    title: \"Chocolate Chip Cookies\",\n    description:\n      \"Classic homemade chocolate chip cookies that are crispy on the outside and chewy on the inside.\",\n    imageUrl: null,\n    prepTime: 15,\n    cookTime: 12,\n    servings: 24,\n    calories: 150,\n    difficulty: \"easy\",\n    category: \"dessert\",\n    tags: [\"cookies\", \"chocolate\", \"baking\"],\n    rating: 4.8,\n    ingredients: [\n      \"2 1/4 cups all-purpose flour\",\n      \"1 tsp baking soda\",\n      \"1 tsp salt\",\n      \"1 cup butter, softened\",\n      \"3/4 cup granulated sugar\",\n      \"3/4 cup brown sugar\",\n      \"2 large eggs\",\n      \"2 tsp vanilla extract\",\n      \"2 cups chocolate chips\",\n    ],\n    instructions: [\n      \"Preheat oven to 375°F.\",\n      \"Mix flour, baking soda, and salt in a bowl.\",\n      \"Cream butter and sugars until fluffy.\",\n      \"Beat in eggs and vanilla.\",\n      \"Gradually add flour mixture.\",\n      \"Stir in chocolate chips.\",\n      \"Drop rounded tablespoons onto ungreased baking sheets.\",\n      \"Bake 9-11 minutes until golden brown.\",\n    ],\n  },\n]\n\nclass RecipesAPI {\n  // Get all recipes with optional filters\n  async getRecipes(params = {}) {\n    try {\n      const response = await api.get(\"/recipes\", { params })\n      const recipes = response.data.recipes || response.data || []\n      return {\n        success: true,\n        data: Array.isArray(recipes) ? recipes : [],\n      }\n    } catch (error) {\n      return {\n        success: true,\n        data: MOCK_RECIPES,\n      }\n    }\n  }\n\n  // Get a single recipe by ID\n  async getRecipeById(id) {\n    try {\n      const response = await api.get(`/recipes/${id}`)\n      const recipe = response.data.recipe || response.data\n\n      const transformedRecipe = {\n        ...recipe,\n        id: recipe._id || recipe.id,\n        tags: recipe.dietaryTags || recipe.tags || [],\n        tips: recipe.tips || [],\n        image: recipe.image || \"🍽️\",\n        ingredients: recipe.ingredients || [],\n        instructions: recipe.instructions || [],\n        rating: recipe.averageRating || 0,\n        reviews: recipe.totalRatings || 0,\n        cookingTime: (recipe.prepTime || 0) + (recipe.cookTime || 0),\n        nutrition: recipe.nutrition || {},\n      }\n\n      return {\n        success: true,\n        data: transformedRecipe,\n      }\n    } catch (error) {\n      const recipe = MOCK_RECIPES.find((r) => r.id === parseInt(id))\n      if (recipe) {\n        return {\n          success: true,\n          data: recipe,\n        }\n      }\n      return {\n        success: false,\n        error: \"Recipe not found\",\n        data: null,\n      }\n    }\n  }\n\n  // Search recipes\n  async searchRecipes(searchTerm, filters = {}) {\n    try {\n      const params = {\n        search: searchTerm,\n        ...filters,\n      }\n      const response = await api.get(\"/recipes/search\", { params })\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      const filtered = MOCK_RECIPES.filter(\n        (recipe) =>\n          recipe.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          recipe.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          recipe.tags.some((tag) =>\n            tag.toLowerCase().includes(searchTerm.toLowerCase())\n          )\n      )\n      return {\n        success: true,\n        data: filtered,\n      }\n    }\n  }\n\n  // Get recipes by category\n  async getRecipesByCategory(category) {\n    try {\n      const response = await api.get(`/recipes/category/${category}`)\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      const filtered = MOCK_RECIPES.filter(\n        (recipe) => category === \"all\" || recipe.category === category\n      )\n      return {\n        success: true,\n        data: filtered,\n      }\n    }\n  }\n\n  // Get featured/popular recipes\n  async getFeaturedRecipes() {\n    try {\n      const response = await api.get(\"/recipes/featured\")\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      const featured = MOCK_RECIPES.filter((recipe) => recipe.rating >= 4.5)\n      return {\n        success: true,\n        data: featured,\n      }\n    }\n  }\n\n  // Add recipe to favorites\n  async addToFavorites(recipeId) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/favorite`)\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Backend not available\",\n      }\n    }\n  }\n\n  // Remove recipe from favorites\n  async removeFromFavorites(recipeId) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/favorite`)\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Backend not available\",\n      }\n    }\n  }\n\n  // Check if recipe is in favorites\n  async isFavorite(recipeId) {\n    try {\n      const response = await api.get(`/recipes/${recipeId}/favorite`)\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      return {\n        success: true,\n        data: { isFavorite: false },\n      }\n    }\n  }\n\n  // Get user's favorite recipes\n  async getFavorites() {\n    try {\n      const response = await api.get(\"/recipes/favorites\")\n      return {\n        success: true,\n        data: response.data.favorites || [],\n      }\n    } catch (error) {\n      return {\n        success: true,\n        data: [],\n      }\n    }\n  }\n\n  // Rate a recipe\n  async rateRecipe(recipeId, rating) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/rate`, { rating })\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Backend not available\",\n      }\n    }\n  }\n\n  // Get recipe categories\n  async getCategories() {\n    try {\n      const response = await api.get(\"/recipes/categories\")\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      const categories = [\n        { value: \"all\", label: \"All Recipes\" },\n        { value: \"healthy\", label: \"Healthy\" },\n        { value: \"vegetarian\", label: \"Vegetarian\" },\n        { value: \"main\", label: \"Main Dishes\" },\n        { value: \"dessert\", label: \"Desserts\" },\n      ]\n      return {\n        success: true,\n        data: categories,\n      }\n    }\n  }\n\n  // Get recipe tags\n  async getTags() {\n    try {\n      const response = await api.get(\"/recipes/tags\")\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      const allTags = MOCK_RECIPES.flatMap((recipe) => recipe.tags)\n      const uniqueTags = [...new Set(allTags)].map((tag) => ({\n        value: tag,\n        label: tag,\n      }))\n      return {\n        success: true,\n        data: uniqueTags,\n      }\n    }\n  }\n}\n\nconst recipesAPI = new RecipesAPI()\nexport default recipesAPI\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}