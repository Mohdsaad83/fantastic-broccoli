{"ast":null,"code":"var _jsxFileName = \"/Users/bosaad77/ga/porjects/fantastic-broccoli/src/contexts/Auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem(\"token\");\n      const storedUser = localStorage.getItem(\"user\");\n      if (token && storedUser) {\n        try {\n          // Just use stored user data, don't call backend\n          setUser(JSON.parse(storedUser));\n        } catch (error) {\n          console.log(\"Invalid stored user data:\", error.message);\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"user\");\n        }\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n\n  // Login function - temporarily disabled API calls\n  const login = async (email, password) => {\n    setLoading(true);\n    try {\n      // Simulate successful login without backend\n      const mockUser = {\n        id: 1,\n        email: email,\n        name: \"Test User\"\n      };\n      const mockToken = \"mock-jwt-token\";\n\n      // Store token and user data\n      localStorage.setItem(\"token\", mockToken);\n      localStorage.setItem(\"user\", JSON.stringify(mockUser));\n      setUser(mockUser);\n      setLoading(false);\n      return {\n        success: true\n      };\n    } catch (error) {\n      setLoading(false);\n      return {\n        success: false,\n        error: \"Login failed\"\n      };\n    }\n  };\n\n  // Register function - temporarily disabled API calls\n  const register = async userData => {\n    setLoading(true);\n    try {\n      // Simulate successful registration without backend\n      const mockUser = {\n        id: 1,\n        email: userData.email,\n        name: userData.name\n      };\n      const mockToken = \"mock-jwt-token\";\n\n      // Store token and user data\n      localStorage.setItem(\"token\", mockToken);\n      localStorage.setItem(\"user\", JSON.stringify(mockUser));\n      setUser(mockUser);\n      setLoading(false);\n      return {\n        success: true\n      };\n    } catch (error) {\n      setLoading(false);\n      return {\n        success: false,\n        error: \"Registration failed\"\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","initializeAuth","token","localStorage","getItem","storedUser","JSON","parse","error","console","log","message","removeItem","login","email","password","mockUser","id","name","mockToken","setItem","stringify","success","register","userData","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/bosaad77/ga/porjects/fantastic-broccoli/src/contexts/Auth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\"\n\nconst AuthContext = createContext()\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem(\"token\")\n      const storedUser = localStorage.getItem(\"user\")\n\n      if (token && storedUser) {\n        try {\n          // Just use stored user data, don't call backend\n          setUser(JSON.parse(storedUser))\n        } catch (error) {\n          console.log(\"Invalid stored user data:\", error.message)\n          localStorage.removeItem(\"token\")\n          localStorage.removeItem(\"user\")\n        }\n      }\n      setLoading(false)\n    }\n\n    initializeAuth()\n  }, [])\n\n  // Login function - temporarily disabled API calls\n  const login = async (email, password) => {\n    setLoading(true)\n    try {\n      // Simulate successful login without backend\n      const mockUser = { id: 1, email: email, name: \"Test User\" }\n      const mockToken = \"mock-jwt-token\"\n\n      // Store token and user data\n      localStorage.setItem(\"token\", mockToken)\n      localStorage.setItem(\"user\", JSON.stringify(mockUser))\n      setUser(mockUser)\n\n      setLoading(false)\n      return { success: true }\n    } catch (error) {\n      setLoading(false)\n      return { success: false, error: \"Login failed\" }\n    }\n  }\n\n  // Register function - temporarily disabled API calls\n  const register = async (userData) => {\n    setLoading(true)\n    try {\n      // Simulate successful registration without backend\n      const mockUser = { id: 1, email: userData.email, name: userData.name }\n      const mockToken = \"mock-jwt-token\"\n\n      // Store token and user data\n      localStorage.setItem(\"token\", mockToken)\n      localStorage.setItem(\"user\", JSON.stringify(mockUser))\n      setUser(mockUser)\n\n      setLoading(false)\n      return { success: true }\n    } catch (error) {\n      setLoading(false)\n      return { success: false, error: \"Registration failed\" }\n    }\n  }\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"user\")\n    setUser(null)\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuth() {\n  return useContext(AuthContext)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}