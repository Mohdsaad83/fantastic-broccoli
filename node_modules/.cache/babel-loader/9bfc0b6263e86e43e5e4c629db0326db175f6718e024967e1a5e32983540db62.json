{"ast":null,"code":"import api from \"./api\";\n\n// Mock data for when API is not available\nconst MOCK_RECIPES = [{\n  id: 1,\n  title: \"Mediterranean Bowl\",\n  description: \"A healthy and delicious Mediterranean-inspired bowl with fresh vegetables, olives, and feta cheese.\",\n  imageUrl: \"/recipe-images/Mediterranean-Bowl-Recipe.jpg\",\n  prepTime: 15,\n  cookTime: 20,\n  servings: 4,\n  calories: 320,\n  difficulty: \"easy\",\n  category: \"healthy\",\n  tags: [\"mediterranean\", \"healthy\", \"vegetarian\"],\n  rating: 4.5,\n  ingredients: [\"2 cups quinoa\", \"1 cucumber, diced\", \"1 cup cherry tomatoes, halved\", \"1/2 red onion, thinly sliced\", \"1/2 cup kalamata olives\", \"4 oz feta cheese, crumbled\", \"1/4 cup olive oil\", \"2 tbsp lemon juice\", \"1 tsp dried oregano\", \"Salt and pepper to taste\"],\n  instructions: [\"Cook quinoa according to package directions and let cool.\", \"In a large bowl, combine quinoa, cucumber, tomatoes, and red onion.\", \"In a small bowl, whisk together olive oil, lemon juice, oregano, salt, and pepper.\", \"Pour dressing over quinoa mixture and toss to combine.\", \"Top with olives and feta cheese.\", \"Serve immediately or chill for later.\"]\n}, {\n  id: 2,\n  title: \"Spicy Mushroom Stir-fry\",\n  description: \"A quick and flavorful stir-fry with mixed mushrooms and aromatic spices.\",\n  imageUrl: \"/recipe-images/msm.jpg\",\n  prepTime: 10,\n  cookTime: 15,\n  servings: 2,\n  calories: 180,\n  difficulty: \"easy\",\n  category: \"vegetarian\",\n  tags: [\"spicy\", \"quick\", \"mushrooms\"],\n  rating: 4.2,\n  ingredients: [\"1 lb mixed mushrooms, sliced\", \"2 tbsp vegetable oil\", \"3 cloves garlic, minced\", \"1 inch ginger, minced\", \"2 green onions, sliced\", \"2 tbsp soy sauce\", \"1 tbsp oyster sauce\", \"1 tsp chili flakes\", \"1 tsp sesame oil\"],\n  instructions: [\"Heat vegetable oil in a large wok or skillet over high heat.\", \"Add mushrooms and cook until golden brown, about 5-7 minutes.\", \"Add garlic and ginger, stir-fry for 30 seconds.\", \"Add soy sauce, oyster sauce, and chili flakes.\", \"Stir-fry for another 2-3 minutes.\", \"Remove from heat, add sesame oil and green onions.\", \"Serve hot with rice.\"]\n}, {\n  id: 3,\n  title: \"Classic Chicken Parmesan\",\n  description: \"Crispy breaded chicken breast topped with marinara sauce and melted cheese.\",\n  imageUrl: null,\n  prepTime: 20,\n  cookTime: 25,\n  servings: 4,\n  calories: 450,\n  difficulty: \"medium\",\n  category: \"main\",\n  tags: [\"chicken\", \"italian\", \"comfort-food\"],\n  rating: 4.7,\n  ingredients: [\"4 chicken breasts, pounded thin\", \"1 cup breadcrumbs\", \"1/2 cup parmesan cheese, grated\", \"2 eggs, beaten\", \"1 cup flour\", \"2 cups marinara sauce\", \"2 cups mozzarella cheese, shredded\", \"2 tbsp olive oil\", \"Salt and pepper to taste\"],\n  instructions: [\"Preheat oven to 375°F.\", \"Set up breading station with flour, beaten eggs, and breadcrumb mixture.\", \"Season chicken with salt and pepper, then bread each piece.\", \"Heat olive oil in a large skillet and brown chicken on both sides.\", \"Transfer chicken to baking dish, top with marinara and cheese.\", \"Bake for 20-25 minutes until cheese is melted and bubbly.\", \"Serve with pasta or salad.\"]\n}, {\n  id: 4,\n  title: \"Chocolate Chip Cookies\",\n  description: \"Classic homemade chocolate chip cookies that are crispy on the outside and chewy on the inside.\",\n  imageUrl: null,\n  prepTime: 15,\n  cookTime: 12,\n  servings: 24,\n  calories: 150,\n  difficulty: \"easy\",\n  category: \"dessert\",\n  tags: [\"cookies\", \"chocolate\", \"baking\"],\n  rating: 4.8,\n  ingredients: [\"2 1/4 cups all-purpose flour\", \"1 tsp baking soda\", \"1 tsp salt\", \"1 cup butter, softened\", \"3/4 cup granulated sugar\", \"3/4 cup brown sugar\", \"2 large eggs\", \"2 tsp vanilla extract\", \"2 cups chocolate chips\"],\n  instructions: [\"Preheat oven to 375°F.\", \"Mix flour, baking soda, and salt in a bowl.\", \"Cream butter and sugars until fluffy.\", \"Beat in eggs and vanilla.\", \"Gradually add flour mixture.\", \"Stir in chocolate chips.\", \"Drop rounded tablespoons onto ungreased baking sheets.\", \"Bake 9-11 minutes until golden brown.\"]\n}];\nclass RecipesAPI {\n  // Get all recipes with optional filters\n  async getRecipes(params = {}) {\n    try {\n      const response = await api.get(\"/recipes\", {\n        params\n      });\n      // Handle backend API response structure which has recipes in response.data.recipes\n      const recipes = response.data.recipes || response.data || [];\n      return {\n        success: true,\n        data: Array.isArray(recipes) ? recipes : []\n      };\n    } catch (error) {\n      // Fallback to mock data when API is not available\n      console.log(\"API not available, using mock data\");\n      return {\n        success: true,\n        data: MOCK_RECIPES\n      };\n    }\n  }\n\n  // Get a single recipe by ID\n  async getRecipeById(id) {\n    try {\n      const response = await api.get(`/recipes/${id}`);\n      // Extract the recipe from the backend response structure\n      const recipe = response.data.recipe || response.data;\n\n      // Transform backend data structure to match frontend expectations\n      const transformedRecipe = {\n        ...recipe,\n        id: recipe._id || recipe.id,\n        tags: recipe.dietaryTags || recipe.tags || [],\n        tips: recipe.tips || [],\n        image: recipe.image || \"🍽️\",\n        // Default emoji if no image\n        // Ensure ingredients and instructions are arrays\n        ingredients: recipe.ingredients || [],\n        instructions: recipe.instructions || [],\n        // Add any missing fields with defaults\n        rating: recipe.averageRating || 0,\n        reviews: recipe.totalRatings || 0,\n        cookingTime: (recipe.prepTime || 0) + (recipe.cookTime || 0),\n        nutrition: recipe.nutrition || {}\n      };\n      return {\n        success: true,\n        data: transformedRecipe\n      };\n    } catch (error) {\n      // Fallback to mock data when API is not available\n      const recipe = MOCK_RECIPES.find(r => r.id === parseInt(id));\n      if (recipe) {\n        return {\n          success: true,\n          data: recipe\n        };\n      }\n      return {\n        success: false,\n        error: \"Recipe not found\",\n        data: null\n      };\n    }\n  }\n\n  // Search recipes\n  async searchRecipes(searchTerm, filters = {}) {\n    try {\n      const params = {\n        search: searchTerm,\n        ...filters\n      };\n      const response = await api.get(\"/recipes/search\", {\n        params\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to mock data search when API is not available\n      const filtered = MOCK_RECIPES.filter(recipe => recipe.title.toLowerCase().includes(searchTerm.toLowerCase()) || recipe.description.toLowerCase().includes(searchTerm.toLowerCase()) || recipe.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())));\n      return {\n        success: true,\n        data: filtered\n      };\n    }\n  }\n\n  // Get recipes by category\n  async getRecipesByCategory(category) {\n    try {\n      const response = await api.get(`/recipes/category/${category}`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to mock data filtered by category\n      const filtered = MOCK_RECIPES.filter(recipe => category === \"all\" || recipe.category === category);\n      return {\n        success: true,\n        data: filtered\n      };\n    }\n  }\n\n  // Get featured/popular recipes\n  async getFeaturedRecipes() {\n    try {\n      const response = await api.get(\"/recipes/featured\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to mock data (return recipes with high ratings)\n      const featured = MOCK_RECIPES.filter(recipe => recipe.rating >= 4.5);\n      return {\n        success: true,\n        data: featured\n      };\n    }\n  }\n\n  // Add recipe to favorites\n  async addToFavorites(recipeId) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/favorite`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to localStorage\n      try {\n        const favorites = JSON.parse(localStorage.getItem(\"userFavorites\") || \"[]\");\n        if (!favorites.includes(recipeId)) {\n          favorites.push(recipeId);\n          localStorage.setItem(\"userFavorites\", JSON.stringify(favorites));\n        }\n        return {\n          success: true,\n          data: {\n            message: \"Added to favorites\"\n          }\n        };\n      } catch (localError) {\n        console.error(\"Error saving to localStorage:\", localError);\n        return {\n          success: false,\n          error: \"Failed to add to favorites\"\n        };\n      }\n    }\n  }\n\n  // Remove recipe from favorites\n  async removeFromFavorites(recipeId) {\n    try {\n      const response = await api.delete(`/recipes/${recipeId}/favorite`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to localStorage\n      try {\n        const favorites = JSON.parse(localStorage.getItem(\"userFavorites\") || \"[]\");\n        const updatedFavorites = favorites.filter(id => id !== recipeId);\n        localStorage.setItem(\"userFavorites\", JSON.stringify(updatedFavorites));\n        return {\n          success: true,\n          data: {\n            message: \"Removed from favorites\"\n          }\n        };\n      } catch (localError) {\n        console.error(\"Error removing from localStorage:\", localError);\n        return {\n          success: false,\n          error: \"Failed to remove from favorites\"\n        };\n      }\n    }\n  }\n\n  // Check if recipe is in favorites\n  async isFavorite(recipeId) {\n    try {\n      const response = await api.get(`/recipes/${recipeId}/favorite`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to localStorage\n      try {\n        const favorites = JSON.parse(localStorage.getItem(\"userFavorites\") || \"[]\");\n        return {\n          success: true,\n          data: {\n            isFavorite: favorites.includes(recipeId)\n          }\n        };\n      } catch (localError) {\n        console.error(\"Error checking localStorage:\", localError);\n        return {\n          success: false,\n          error: \"Failed to check favorite status\"\n        };\n      }\n    }\n  }\n\n  // Get all favorite recipes\n  async getFavorites() {\n    try {\n      const response = await api.get(\"/recipes/favorites\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to localStorage\n      try {\n        const favoriteIds = JSON.parse(localStorage.getItem(\"userFavorites\") || \"[]\");\n        return {\n          success: true,\n          data: favoriteIds\n        };\n      } catch (localError) {\n        console.error(\"Error getting favorites from localStorage:\", localError);\n        return {\n          success: false,\n          error: \"Failed to get favorites\"\n        };\n      }\n    }\n  }\n\n  // Rate a recipe\n  async rateRecipe(recipeId, rating) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/rate`, {\n        rating\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Error rating recipe:\", error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to rate recipe\"\n      };\n    }\n  }\n\n  // Get recipe categories\n  async getCategories() {\n    try {\n      const response = await api.get(\"/recipes/categories\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to mock categories\n      const categories = [{\n        value: \"all\",\n        label: \"All Recipes\"\n      }, {\n        value: \"healthy\",\n        label: \"Healthy\"\n      }, {\n        value: \"vegetarian\",\n        label: \"Vegetarian\"\n      }, {\n        value: \"main\",\n        label: \"Main Dishes\"\n      }, {\n        value: \"dessert\",\n        label: \"Desserts\"\n      }];\n      return {\n        success: true,\n        data: categories\n      };\n    }\n  }\n\n  // Get recipe tags\n  async getTags() {\n    try {\n      const response = await api.get(\"/recipes/tags\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      // Fallback to mock tags extracted from mock recipes\n      const allTags = MOCK_RECIPES.flatMap(recipe => recipe.tags);\n      const uniqueTags = [...new Set(allTags)].map(tag => ({\n        value: tag,\n        label: tag\n      }));\n      return {\n        success: true,\n        data: uniqueTags\n      };\n    }\n  }\n}\nconst recipesAPI = new RecipesAPI();\nexport default recipesAPI;","map":{"version":3,"names":["api","MOCK_RECIPES","id","title","description","imageUrl","prepTime","cookTime","servings","calories","difficulty","category","tags","rating","ingredients","instructions","RecipesAPI","getRecipes","params","response","get","recipes","data","success","Array","isArray","error","console","log","getRecipeById","recipe","transformedRecipe","_id","dietaryTags","tips","image","averageRating","reviews","totalRatings","cookingTime","nutrition","find","r","parseInt","searchRecipes","searchTerm","filters","search","filtered","filter","toLowerCase","includes","some","tag","getRecipesByCategory","getFeaturedRecipes","featured","addToFavorites","recipeId","post","favorites","JSON","parse","localStorage","getItem","push","setItem","stringify","message","localError","removeFromFavorites","delete","updatedFavorites","isFavorite","getFavorites","favoriteIds","rateRecipe","_error$response","_error$response$data","getCategories","categories","value","label","getTags","allTags","flatMap","uniqueTags","Set","map","recipesAPI"],"sources":["/Users/bosaad77/ga/porjects/fantastic-broccoli/src/services/recipesAPI.js"],"sourcesContent":["import api from \"./api\"\n\n// Mock data for when API is not available\nconst MOCK_RECIPES = [\n  {\n    id: 1,\n    title: \"Mediterranean Bowl\",\n    description:\n      \"A healthy and delicious Mediterranean-inspired bowl with fresh vegetables, olives, and feta cheese.\",\n    imageUrl: \"/recipe-images/Mediterranean-Bowl-Recipe.jpg\",\n    prepTime: 15,\n    cookTime: 20,\n    servings: 4,\n    calories: 320,\n    difficulty: \"easy\",\n    category: \"healthy\",\n    tags: [\"mediterranean\", \"healthy\", \"vegetarian\"],\n    rating: 4.5,\n    ingredients: [\n      \"2 cups quinoa\",\n      \"1 cucumber, diced\",\n      \"1 cup cherry tomatoes, halved\",\n      \"1/2 red onion, thinly sliced\",\n      \"1/2 cup kalamata olives\",\n      \"4 oz feta cheese, crumbled\",\n      \"1/4 cup olive oil\",\n      \"2 tbsp lemon juice\",\n      \"1 tsp dried oregano\",\n      \"Salt and pepper to taste\",\n    ],\n    instructions: [\n      \"Cook quinoa according to package directions and let cool.\",\n      \"In a large bowl, combine quinoa, cucumber, tomatoes, and red onion.\",\n      \"In a small bowl, whisk together olive oil, lemon juice, oregano, salt, and pepper.\",\n      \"Pour dressing over quinoa mixture and toss to combine.\",\n      \"Top with olives and feta cheese.\",\n      \"Serve immediately or chill for later.\",\n    ],\n  },\n  {\n    id: 2,\n    title: \"Spicy Mushroom Stir-fry\",\n    description:\n      \"A quick and flavorful stir-fry with mixed mushrooms and aromatic spices.\",\n    imageUrl: \"/recipe-images/msm.jpg\",\n    prepTime: 10,\n    cookTime: 15,\n    servings: 2,\n    calories: 180,\n    difficulty: \"easy\",\n    category: \"vegetarian\",\n    tags: [\"spicy\", \"quick\", \"mushrooms\"],\n    rating: 4.2,\n    ingredients: [\n      \"1 lb mixed mushrooms, sliced\",\n      \"2 tbsp vegetable oil\",\n      \"3 cloves garlic, minced\",\n      \"1 inch ginger, minced\",\n      \"2 green onions, sliced\",\n      \"2 tbsp soy sauce\",\n      \"1 tbsp oyster sauce\",\n      \"1 tsp chili flakes\",\n      \"1 tsp sesame oil\",\n    ],\n    instructions: [\n      \"Heat vegetable oil in a large wok or skillet over high heat.\",\n      \"Add mushrooms and cook until golden brown, about 5-7 minutes.\",\n      \"Add garlic and ginger, stir-fry for 30 seconds.\",\n      \"Add soy sauce, oyster sauce, and chili flakes.\",\n      \"Stir-fry for another 2-3 minutes.\",\n      \"Remove from heat, add sesame oil and green onions.\",\n      \"Serve hot with rice.\",\n    ],\n  },\n  {\n    id: 3,\n    title: \"Classic Chicken Parmesan\",\n    description:\n      \"Crispy breaded chicken breast topped with marinara sauce and melted cheese.\",\n    imageUrl: null,\n    prepTime: 20,\n    cookTime: 25,\n    servings: 4,\n    calories: 450,\n    difficulty: \"medium\",\n    category: \"main\",\n    tags: [\"chicken\", \"italian\", \"comfort-food\"],\n    rating: 4.7,\n    ingredients: [\n      \"4 chicken breasts, pounded thin\",\n      \"1 cup breadcrumbs\",\n      \"1/2 cup parmesan cheese, grated\",\n      \"2 eggs, beaten\",\n      \"1 cup flour\",\n      \"2 cups marinara sauce\",\n      \"2 cups mozzarella cheese, shredded\",\n      \"2 tbsp olive oil\",\n      \"Salt and pepper to taste\",\n    ],\n    instructions: [\n      \"Preheat oven to 375°F.\",\n      \"Set up breading station with flour, beaten eggs, and breadcrumb mixture.\",\n      \"Season chicken with salt and pepper, then bread each piece.\",\n      \"Heat olive oil in a large skillet and brown chicken on both sides.\",\n      \"Transfer chicken to baking dish, top with marinara and cheese.\",\n      \"Bake for 20-25 minutes until cheese is melted and bubbly.\",\n      \"Serve with pasta or salad.\",\n    ],\n  },\n  {\n    id: 4,\n    title: \"Chocolate Chip Cookies\",\n    description:\n      \"Classic homemade chocolate chip cookies that are crispy on the outside and chewy on the inside.\",\n    imageUrl: null,\n    prepTime: 15,\n    cookTime: 12,\n    servings: 24,\n    calories: 150,\n    difficulty: \"easy\",\n    category: \"dessert\",\n    tags: [\"cookies\", \"chocolate\", \"baking\"],\n    rating: 4.8,\n    ingredients: [\n      \"2 1/4 cups all-purpose flour\",\n      \"1 tsp baking soda\",\n      \"1 tsp salt\",\n      \"1 cup butter, softened\",\n      \"3/4 cup granulated sugar\",\n      \"3/4 cup brown sugar\",\n      \"2 large eggs\",\n      \"2 tsp vanilla extract\",\n      \"2 cups chocolate chips\",\n    ],\n    instructions: [\n      \"Preheat oven to 375°F.\",\n      \"Mix flour, baking soda, and salt in a bowl.\",\n      \"Cream butter and sugars until fluffy.\",\n      \"Beat in eggs and vanilla.\",\n      \"Gradually add flour mixture.\",\n      \"Stir in chocolate chips.\",\n      \"Drop rounded tablespoons onto ungreased baking sheets.\",\n      \"Bake 9-11 minutes until golden brown.\",\n    ],\n  },\n]\n\nclass RecipesAPI {\n  // Get all recipes with optional filters\n  async getRecipes(params = {}) {\n    try {\n      const response = await api.get(\"/recipes\", { params })\n      // Handle backend API response structure which has recipes in response.data.recipes\n      const recipes = response.data.recipes || response.data || []\n      return {\n        success: true,\n        data: Array.isArray(recipes) ? recipes : [],\n      }\n    } catch (error) {\n      // Fallback to mock data when API is not available\n      console.log(\"API not available, using mock data\")\n      return {\n        success: true,\n        data: MOCK_RECIPES,\n      }\n    }\n  }\n\n  // Get a single recipe by ID\n  async getRecipeById(id) {\n    try {\n      const response = await api.get(`/recipes/${id}`)\n      // Extract the recipe from the backend response structure\n      const recipe = response.data.recipe || response.data\n\n      // Transform backend data structure to match frontend expectations\n      const transformedRecipe = {\n        ...recipe,\n        id: recipe._id || recipe.id,\n        tags: recipe.dietaryTags || recipe.tags || [],\n        tips: recipe.tips || [],\n        image: recipe.image || \"🍽️\", // Default emoji if no image\n        // Ensure ingredients and instructions are arrays\n        ingredients: recipe.ingredients || [],\n        instructions: recipe.instructions || [],\n        // Add any missing fields with defaults\n        rating: recipe.averageRating || 0,\n        reviews: recipe.totalRatings || 0,\n        cookingTime: (recipe.prepTime || 0) + (recipe.cookTime || 0),\n        nutrition: recipe.nutrition || {},\n      }\n\n      return {\n        success: true,\n        data: transformedRecipe,\n      }\n    } catch (error) {\n      // Fallback to mock data when API is not available\n      const recipe = MOCK_RECIPES.find((r) => r.id === parseInt(id))\n      if (recipe) {\n        return {\n          success: true,\n          data: recipe,\n        }\n      }\n      return {\n        success: false,\n        error: \"Recipe not found\",\n        data: null,\n      }\n    }\n  }\n\n  // Search recipes\n  async searchRecipes(searchTerm, filters = {}) {\n    try {\n      const params = {\n        search: searchTerm,\n        ...filters,\n      }\n      const response = await api.get(\"/recipes/search\", { params })\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to mock data search when API is not available\n      const filtered = MOCK_RECIPES.filter(\n        (recipe) =>\n          recipe.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          recipe.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          recipe.tags.some((tag) =>\n            tag.toLowerCase().includes(searchTerm.toLowerCase())\n          )\n      )\n      return {\n        success: true,\n        data: filtered,\n      }\n    }\n  }\n\n  // Get recipes by category\n  async getRecipesByCategory(category) {\n    try {\n      const response = await api.get(`/recipes/category/${category}`)\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to mock data filtered by category\n      const filtered = MOCK_RECIPES.filter(\n        (recipe) => category === \"all\" || recipe.category === category\n      )\n      return {\n        success: true,\n        data: filtered,\n      }\n    }\n  }\n\n  // Get featured/popular recipes\n  async getFeaturedRecipes() {\n    try {\n      const response = await api.get(\"/recipes/featured\")\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to mock data (return recipes with high ratings)\n      const featured = MOCK_RECIPES.filter((recipe) => recipe.rating >= 4.5)\n      return {\n        success: true,\n        data: featured,\n      }\n    }\n  }\n\n  // Add recipe to favorites\n  async addToFavorites(recipeId) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/favorite`)\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to localStorage\n      try {\n        const favorites = JSON.parse(\n          localStorage.getItem(\"userFavorites\") || \"[]\"\n        )\n        if (!favorites.includes(recipeId)) {\n          favorites.push(recipeId)\n          localStorage.setItem(\"userFavorites\", JSON.stringify(favorites))\n        }\n\n        return {\n          success: true,\n          data: { message: \"Added to favorites\" },\n        }\n      } catch (localError) {\n        console.error(\"Error saving to localStorage:\", localError)\n        return {\n          success: false,\n          error: \"Failed to add to favorites\",\n        }\n      }\n    }\n  }\n\n  // Remove recipe from favorites\n  async removeFromFavorites(recipeId) {\n    try {\n      const response = await api.delete(`/recipes/${recipeId}/favorite`)\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to localStorage\n      try {\n        const favorites = JSON.parse(\n          localStorage.getItem(\"userFavorites\") || \"[]\"\n        )\n        const updatedFavorites = favorites.filter((id) => id !== recipeId)\n        localStorage.setItem(\"userFavorites\", JSON.stringify(updatedFavorites))\n\n        return {\n          success: true,\n          data: { message: \"Removed from favorites\" },\n        }\n      } catch (localError) {\n        console.error(\"Error removing from localStorage:\", localError)\n        return {\n          success: false,\n          error: \"Failed to remove from favorites\",\n        }\n      }\n    }\n  }\n\n  // Check if recipe is in favorites\n  async isFavorite(recipeId) {\n    try {\n      const response = await api.get(`/recipes/${recipeId}/favorite`)\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to localStorage\n      try {\n        const favorites = JSON.parse(\n          localStorage.getItem(\"userFavorites\") || \"[]\"\n        )\n        return {\n          success: true,\n          data: { isFavorite: favorites.includes(recipeId) },\n        }\n      } catch (localError) {\n        console.error(\"Error checking localStorage:\", localError)\n        return {\n          success: false,\n          error: \"Failed to check favorite status\",\n        }\n      }\n    }\n  }\n\n  // Get all favorite recipes\n  async getFavorites() {\n    try {\n      const response = await api.get(\"/recipes/favorites\")\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to localStorage\n      try {\n        const favoriteIds = JSON.parse(\n          localStorage.getItem(\"userFavorites\") || \"[]\"\n        )\n        return {\n          success: true,\n          data: favoriteIds,\n        }\n      } catch (localError) {\n        console.error(\"Error getting favorites from localStorage:\", localError)\n        return {\n          success: false,\n          error: \"Failed to get favorites\",\n        }\n      }\n    }\n  }\n\n  // Rate a recipe\n  async rateRecipe(recipeId, rating) {\n    try {\n      const response = await api.post(`/recipes/${recipeId}/rate`, { rating })\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      console.error(\"Error rating recipe:\", error)\n      return {\n        success: false,\n        error: error.response?.data?.message || \"Failed to rate recipe\",\n      }\n    }\n  }\n\n  // Get recipe categories\n  async getCategories() {\n    try {\n      const response = await api.get(\"/recipes/categories\")\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to mock categories\n      const categories = [\n        { value: \"all\", label: \"All Recipes\" },\n        { value: \"healthy\", label: \"Healthy\" },\n        { value: \"vegetarian\", label: \"Vegetarian\" },\n        { value: \"main\", label: \"Main Dishes\" },\n        { value: \"dessert\", label: \"Desserts\" },\n      ]\n      return {\n        success: true,\n        data: categories,\n      }\n    }\n  }\n\n  // Get recipe tags\n  async getTags() {\n    try {\n      const response = await api.get(\"/recipes/tags\")\n      return {\n        success: true,\n        data: response.data,\n      }\n    } catch (error) {\n      // Fallback to mock tags extracted from mock recipes\n      const allTags = MOCK_RECIPES.flatMap((recipe) => recipe.tags)\n      const uniqueTags = [...new Set(allTags)].map((tag) => ({\n        value: tag,\n        label: tag,\n      }))\n      return {\n        success: true,\n        data: uniqueTags,\n      }\n    }\n  }\n}\n\nconst recipesAPI = new RecipesAPI()\nexport default recipesAPI\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}