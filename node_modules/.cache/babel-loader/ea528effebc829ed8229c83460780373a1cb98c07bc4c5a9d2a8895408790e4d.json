{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback}from\"react\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const logout=()=>{localStorage.removeItem(\"token\");delete axios.defaults.headers.common[\"Authorization\"];setUser(null);};const fetchUserProfile=useCallback(async()=>{try{// Try API call first\nconst response=await axios.get(\"/api/users/profile\");setUser(response.data);}catch(error){console.log(\"API profile fetch failed, using mock authentication\");// Check for mock token\nconst token=localStorage.getItem(\"token\");if(token&&token.startsWith(\"mock_token_\")){// Extract user ID from mock token\nconst userId=parseInt(token.split(\"_\")[2]);const existingUsers=JSON.parse(localStorage.getItem(\"registeredUsers\")||\"[]\");const user=existingUsers.find(u=>u.id===userId);if(user){setUser(user);}else{logout();}}else{logout();}}finally{setLoading(false);}},[]);useEffect(()=>{const token=localStorage.getItem(\"token\");if(token){axios.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(token);// Verify token and get user info\nfetchUserProfile();}else{setLoading(false);}},[fetchUserProfile]);const login=async(email,password)=>{try{// Try API call first\nconst response=await axios.post(\"/api/auth/login\",{email,password});const{token,user}=response.data;localStorage.setItem(\"token\",token);axios.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(token);setUser(user);return{success:true};}catch(error){// Fallback to mock login for demo purposes\nconsole.log(\"API login failed, using mock login\");// Check if user exists in localStorage\nconst existingUsers=JSON.parse(localStorage.getItem(\"registeredUsers\")||\"[]\");const existingUser=existingUsers.find(user=>user.email===email);if(!existingUser){return{success:false,error:\"No account found with this email address\"};}// For demo purposes, accept any password for registered users\n// In a real app, you'd verify the password hash\n// Generate mock token and set user\nconst mockToken=\"mock_token_\".concat(existingUser.id,\"_\").concat(Date.now());localStorage.setItem(\"token\",mockToken);axios.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(mockToken);setUser(existingUser);return{success:true};}};const register=async(name,email,password)=>{try{// Try API call first\nconst response=await axios.post(\"/api/auth/register\",{name,email,password});const{token,user}=response.data;localStorage.setItem(\"token\",token);axios.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(token);setUser(user);return{success:true};}catch(error){// Fallback to mock registration for demo purposes\nconsole.log(\"API registration failed, using mock registration\");// Check if user already exists in localStorage\nconst existingUsers=JSON.parse(localStorage.getItem(\"registeredUsers\")||\"[]\");const userExists=existingUsers.find(user=>user.email===email);if(userExists){return{success:false,error:\"User with this email already exists\"};}// Create new user\nconst newUser={id:Date.now(),// Simple ID generation\nname,email,createdAt:new Date().toISOString()};// Add to registered users\nexistingUsers.push(newUser);localStorage.setItem(\"registeredUsers\",JSON.stringify(existingUsers));// Generate mock token and set user\nconst mockToken=\"mock_token_\".concat(newUser.id,\"_\").concat(Date.now());localStorage.setItem(\"token\",mockToken);axios.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(mockToken);setUser(newUser);return{success:true};}};const value={user,login,register,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","axios","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","logout","localStorage","removeItem","defaults","headers","common","fetchUserProfile","response","get","data","error","console","log","token","getItem","startsWith","userId","parseInt","split","existingUsers","JSON","parse","find","u","id","concat","login","email","password","post","setItem","success","existingUser","mockToken","Date","now","register","name","userExists","newUser","createdAt","toISOString","push","stringify","value","Provider"],"sources":["/Users/bosaad77/ga/porjects/fantastic-broccoli/src/contexts/Auth.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\"\nimport axios from \"axios\"\n\nconst AuthContext = createContext()\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    delete axios.defaults.headers.common[\"Authorization\"]\n    setUser(null)\n  }\n\n  const fetchUserProfile = useCallback(async () => {\n    try {\n      // Try API call first\n      const response = await axios.get(\"/api/users/profile\")\n      setUser(response.data)\n    } catch (error) {\n      console.log(\"API profile fetch failed, using mock authentication\")\n\n      // Check for mock token\n      const token = localStorage.getItem(\"token\")\n      if (token && token.startsWith(\"mock_token_\")) {\n        // Extract user ID from mock token\n        const userId = parseInt(token.split(\"_\")[2])\n        const existingUsers = JSON.parse(\n          localStorage.getItem(\"registeredUsers\") || \"[]\"\n        )\n        const user = existingUsers.find((u) => u.id === userId)\n\n        if (user) {\n          setUser(user)\n        } else {\n          logout()\n        }\n      } else {\n        logout()\n      }\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n      // Verify token and get user info\n      fetchUserProfile()\n    } else {\n      setLoading(false)\n    }\n  }, [fetchUserProfile])\n\n  const login = async (email, password) => {\n    try {\n      // Try API call first\n      const response = await axios.post(\"/api/auth/login\", { email, password })\n      const { token, user } = response.data\n\n      localStorage.setItem(\"token\", token)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n      setUser(user)\n\n      return { success: true }\n    } catch (error) {\n      // Fallback to mock login for demo purposes\n      console.log(\"API login failed, using mock login\")\n\n      // Check if user exists in localStorage\n      const existingUsers = JSON.parse(\n        localStorage.getItem(\"registeredUsers\") || \"[]\"\n      )\n      const existingUser = existingUsers.find((user) => user.email === email)\n\n      if (!existingUser) {\n        return {\n          success: false,\n          error: \"No account found with this email address\",\n        }\n      }\n\n      // For demo purposes, accept any password for registered users\n      // In a real app, you'd verify the password hash\n\n      // Generate mock token and set user\n      const mockToken = `mock_token_${existingUser.id}_${Date.now()}`\n      localStorage.setItem(\"token\", mockToken)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${mockToken}`\n      setUser(existingUser)\n\n      return { success: true }\n    }\n  }\n\n  const register = async (name, email, password) => {\n    try {\n      // Try API call first\n      const response = await axios.post(\"/api/auth/register\", {\n        name,\n        email,\n        password,\n      })\n      const { token, user } = response.data\n\n      localStorage.setItem(\"token\", token)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n      setUser(user)\n\n      return { success: true }\n    } catch (error) {\n      // Fallback to mock registration for demo purposes\n      console.log(\"API registration failed, using mock registration\")\n\n      // Check if user already exists in localStorage\n      const existingUsers = JSON.parse(\n        localStorage.getItem(\"registeredUsers\") || \"[]\"\n      )\n      const userExists = existingUsers.find((user) => user.email === email)\n\n      if (userExists) {\n        return {\n          success: false,\n          error: \"User with this email already exists\",\n        }\n      }\n\n      // Create new user\n      const newUser = {\n        id: Date.now(), // Simple ID generation\n        name,\n        email,\n        createdAt: new Date().toISOString(),\n      }\n\n      // Add to registered users\n      existingUsers.push(newUser)\n      localStorage.setItem(\"registeredUsers\", JSON.stringify(existingUsers))\n\n      // Generate mock token and set user\n      const mockToken = `mock_token_${newUser.id}_${Date.now()}`\n      localStorage.setItem(\"token\", mockToken)\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${mockToken}`\n      setUser(newUser)\n\n      return { success: true }\n    }\n  }\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}